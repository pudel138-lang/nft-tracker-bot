import logging
import json
import os
import time
import random
import string
import html
import base64
from urllib.request import urlopen, Request
from urllib.parse import urlencode
from flask import Flask, request, jsonify

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
BOT_TOKEN = "8269202056:AAEsbpsM93ey7C0Zh9dlT6oUKW2a_rFWl5w"
WEBHOOK_URL = f"https://nft-tracker-bot.onrender.com/webhook/{BOT_TOKEN}"

# CryptoBot API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–ª—É—á–∏ –≤ @CryptoBot)
CRYPTOBOT_TOKEN = "–¢–í–û–ô_CRYPTOBOT_TOKEN"  # –ü–æ–ª—É—á–∏ –≤ @CryptoBot —á–µ—Ä–µ–∑ /start
CRYPTOBOT_API_URL = "https://pay.crypt.bot/api"

SOFTWARE_GROUP_LINK = "https://t.me/+um2ZFdJnNnM0Mjhi"
DATA_FILE = "purchases.json"

PRICES = {
    "LITE": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
    "VIP": {"LIFETIME": 200, "MONTH": 50, "WEEK": 0},
    "TERMUX": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
}

# –§–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏
VERSION_PHOTOS = {
    "LITE": "lite.jpg",
    "VIP": "vip.jpg", 
    "TERMUX": "termux.jpg"
}

VERSION_DESCRIPTIONS = {
    "LITE": "üîπ <b>LITE –≤–µ—Ä—Å–∏—è</b>\n\n‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ NFT\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 10 –∫–æ–ª–ª–µ–∫—Ü–∏–π",
    "VIP": "üî∏ <b>VIP –≤–µ—Ä—Å–∏—è</b>\n\n‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ LITE\n‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π\n‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ–∏—á–∏",
    "TERMUX": "üü¢ <b>Termux –≤–µ—Ä—Å–∏—è</b>\n\n‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ Android\n‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º\n‚Ä¢ –ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤\n‚Ä¢ –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º"
}

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
app = Flask(__name__)

# ========== CryptoBot API ==========
def cryptobot_request(method, data=None):
    """–ó–∞–ø—Ä–æ—Å –∫ CryptoBot API"""
    url = f"{CRYPTOBOT_API_URL}/{method}"
    
    headers = {
        'Crypto-Pay-API-Token': CRYPTOBOT_TOKEN,
        'Content-Type': 'application/json'
    }
    
    if data:
        json_data = json.dumps(data).encode('utf-8')
        req = Request(url, data=json_data, headers=headers)
    else:
        req = Request(url, headers=headers)
    
    try:
        with urlopen(req) as response:
            result = json.loads(response.read().decode())
            if result.get('ok'):
                return result.get('result')
            else:
                logger.error(f"CryptoBot API error: {result}")
                return None
    except Exception as e:
        logger.error(f"CryptoBot request error: {e}")
        return None

def create_cryptobot_invoice(amount, asset="USDT", description="", hidden_message=""):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoBot"""
    data = {
        "asset": asset,
        "amount": str(amount),
        "description": description,
        "hidden_message": hidden_message,
        "paid_btn_name": "callback",
        "paid_btn_url": "https://t.me/nft_tracker_soft_bot",
        "allow_comments": False,
        "allow_anonymous": False
    }
    
    return cryptobot_request("createInvoice", data)

def check_cryptobot_invoice(invoice_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞"""
    return cryptobot_request("getInvoices", {"invoice_ids": invoice_id})

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def load_data():
    if not os.path.exists(DATA_FILE):
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_data(records):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(records, f, indent=2, ensure_ascii=False)

def gen_key(version):
    s = "".join(random.choices(string.ascii_uppercase + string.digits, k=8))
    t = int(time.time()) % 100000
    ver = (version or "KEY")[:3].upper()
    return f"{ver}-{s}-{t}"

def pretty_price(price_usd):
    return f"${price_usd}"

def quote_html(text: str) -> str:
    return html.escape(str(text))

def make_telegram_request(method, data=None):
    """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/{method}'
    
    if data:
        json_data = json.dumps(data).encode('utf-8')
        req = Request(url, data=json_data, headers={'Content-Type': 'application/json'})
    else:
        req = Request(url)
    
    try:
        with urlopen(req) as response:
            return json.loads(response.read().decode())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram: {e}")
        return None

def send_telegram_message(chat_id, text, reply_markup=None):
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = reply_markup
    return make_telegram_request('sendMessage', data)

def send_telegram_photo(chat_id, photo_path, caption, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API"""
    # –ß–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open(photo_path, 'rb') as photo_file:
            photo_data = photo_file.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        photo_b64 = base64.b64encode(photo_data).decode('utf-8')
        
        data = {
            'chat_id': chat_id,
            'photo': f"data:image/jpeg;base64,{photo_b64}",
            'caption': caption,
            'parse_mode': 'HTML'
        }
        if reply_markup:
            data['reply_markup'] = reply_markup
            
        return make_telegram_request('sendPhoto', data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return send_telegram_message(chat_id, caption, reply_markup)

def edit_telegram_message(chat_id, message_id, text, reply_markup=None):
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = reply_markup
    return make_telegram_request('editMessageText', data)

def answer_callback_query(callback_query_id, text=None):
    data = {'callback_query_id': callback_query_id}
    if text:
        data['text'] = text
    return make_telegram_request('answerCallbackQuery', data)

# ========== Inline –º–µ–Ω—é ==========
def main_menu_markup():
    return {
        "inline_keyboard": [
            [
                {"text": "üõí –ö—É–ø–∏—Ç—å –∫–ª—é—á", "callback_data": "menu_buy"},
                {"text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "menu_profile"}
            ],
            [
                {"text": "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–∫–∞", "callback_data": "menu_ref"},
                {"text": "üá¨üáß English", "callback_data": "menu_lang_en"}
            ]
        ]
    }

def versions_markup():
    return {
        "inline_keyboard": [
            [
                {"text": "üîπ LITE", "callback_data": "ver_LITE"},
                {"text": "üî∏ VIP", "callback_data": "ver_VIP"}
            ],
            [
                {"text": "üü¢ Termux", "callback_data": "ver_TERMUX"},
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_main"}
            ]
        ]
    }

def plan_markup(version):
    tariffs = PRICES.get(version, {})
    buttons = []
    
    for plan_key, price in tariffs.items():
        if price and price > 0:
            label = f"{plan_key} - ${price}"
            callback_data = f"plan_{version}_{plan_key}_{price}"
            buttons.append([{"text": label, "callback_data": callback_data}])
    
    buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "menu_buy"}])
    
    return {"inline_keyboard": buttons}

def payment_markup(version, plan, price):
    return {
        "inline_keyboard": [
            [
                {"text": "üí≥ CryptoBot (USDT)", "callback_data": f"pay_crypto_{version}_{plan}_{price}"},
            ],
            [
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": f"ver_{version}"}
            ]
        ]
    }

def back_button_markup():
    return {
        "inline_keyboard": [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_main"}]]
    }

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
def handle_start(chat_id, first_name):
    text = f"üéØ NFT TRACKER BOT\n\n–ü—Ä–∏–≤–µ—Ç, {first_name}!"
    send_telegram_message(chat_id, text, main_menu_markup())

def handle_id(chat_id):
    send_telegram_message(chat_id, f"üÜî Your chat_id = {chat_id}")

def handle_menu_buy(chat_id, message_id):
    edit_telegram_message(chat_id, message_id, "üíé –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", versions_markup())

def handle_select_version(chat_id, message_id, version):
    """–ü–æ–∫–∞–∑ –≤–µ—Ä—Å–∏–∏ —Å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    photo_path = VERSION_PHOTOS.get(version)
    description = VERSION_DESCRIPTIONS.get(version, f"–í–µ—Ä—Å–∏—è {version}")
    
    if photo_path and os.path.exists(photo_path):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        caption = f"{description}\n\nüíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
        send_telegram_photo(chat_id, photo_path, caption, plan_markup(version))
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        make_telegram_request('deleteMessage', {
            'chat_id': chat_id,
            'message_id': message_id
        })
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"{description}\n\nüíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
        edit_telegram_message(chat_id, message_id, text, plan_markup(version))

def handle_select_plan(chat_id, message_id, version, plan, price):
    text = (
        f"üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
        f"‚öô –í–µ—Ä—Å–∏—è: <b>{version}</b>\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{plan}</b>\n"
        f"üí≤ –°—É–º–º–∞: <b>${price}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    edit_telegram_message(chat_id, message_id, text, payment_markup(version, plan, price))

def handle_payment(chat_id, message_id, version, plan, price, payment_method):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    if payment_method == "crypto":
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
        description = f"NFT Tracker - {version} {plan}"
        hidden_message = f"User: {chat_id}, Version: {version}, Plan: {plan}"
        
        invoice = create_cryptobot_invoice(
            amount=price,
            asset="USDT",
            description=description,
            hidden_message=hidden_message
        )
        
        if invoice and invoice.get('pay_url'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–Ω–≤–æ–π—Å–µ
            invoice_data = {
                "invoice_id": invoice['invoice_id'],
                "user_id": chat_id,
                "version": version,
                "plan": plan,
                "price": price,
                "status": "pending",
                "created_at": time.strftime("%Y-%m-%d %H:%M:%S"),
                "pay_url": invoice['pay_url']
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
            pending_file = "pending_payments.json"
            pending_data = load_pending_payments()
            pending_data.append(invoice_data)
            save_pending_payments(pending_data)
            
            text = (
                f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n\n"
                f"‚öô –í–µ—Ä—Å–∏—è: <b>{version}</b>\n"
                f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{plan}</b>\n"
                f"üí≤ –°—É–º–º–∞: <b>${price} USDT</b>\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\n"
                f"‚è∞ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç"
            )
            
            markup = {
                "inline_keyboard": [
                    [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", "url": invoice['pay_url']}],
                    [{"text": "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "callback_data": f"check_payment_{invoice['invoice_id']}"}],
                    [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": f"cancel_payment_{invoice['invoice_id']}"}]
                ]
            }
            
            edit_telegram_message(chat_id, message_id, text, markup)
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            edit_telegram_message(chat_id, message_id, text)

def handle_check_payment(chat_id, message_id, invoice_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    invoice = check_cryptobot_invoice(invoice_id)
    
    if invoice and len(invoice) > 0:
        invoice_data = invoice[0]
        
        if invoice_data.get('status') == 'paid':
            # –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            handle_successful_payment(chat_id, message_id, invoice_id, invoice_data)
        else:
            # –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞
            text = "‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            answer_callback_query(chat_id, text)
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."
        answer_callback_query(chat_id, text)

def handle_successful_payment(chat_id, message_id, invoice_id, invoice_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    pending_data = load_pending_payments()
    order_data = None
    
    for order in pending_data:
        if order.get('invoice_id') == invoice_id:
            order_data = order
            break
    
    if order_data:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
        key = gen_key(order_data['version'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        purchase_data = {
            "user_id": chat_id,
            "version": order_data['version'],
            "plan": order_data['plan'],
            "price": order_data['price'],
            "key": key,
            "payment_method": "cryptobot",
            "status": "paid",
            "invoice_id": invoice_id,
            "created_at": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        data = load_data()
        data.append(purchase_data)
        save_data(data)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        pending_data = [order for order in pending_data if order.get('invoice_id') != invoice_id]
        save_pending_payments(pending_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–µ—Ä—Å–∏–∏ —Å –∫–ª—é—á–æ–º
        photo_path = VERSION_PHOTOS.get(order_data['version'])
        caption = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"‚öô –í–µ—Ä—Å–∏—è: <b>{order_data['version']}</b>\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{order_data['plan']}</b>\n"
            f"üí≤ –°—É–º–º–∞: <b>${order_data['price']}</b>\n"
            f"üîë –í–∞—à –∫–ª—é—á: <code>{key}</code>\n\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ñ—Ç–æ–º:\n{SOFTWARE_GROUP_LINK}\n\n"
            f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!"
        )
        
        if photo_path and os.path.exists(photo_path):
            send_telegram_photo(chat_id, photo_path, caption)
        else:
            send_telegram_message(chat_id, caption)

def load_pending_payments():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    pending_file = "pending_payments.json"
    if not os.path.exists(pending_file):
        return []
    try:
        with open(pending_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_pending_payments(records):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    pending_file = "pending_payments.json"
    with open(pending_file, "w", encoding="utf-8") as f:
        json.dump(records, f, indent=2, ensure_ascii=False)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle_menu_profile, handle_menu_ref –∏ —Ç.–¥. –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# –í–ê–ñ–ù–û: –ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞!

# ========== Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    try:
        update_data = request.get_json()
        logger.info("–ü–æ–ª—É—á–µ–Ω update –æ—Ç Telegram")
        
        if "message" in update_data:
            message = update_data["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            if text.startswith("/start"):
                handle_start(chat_id, message["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
            elif text.startswith("/id"):
                handle_id(chat_id)
            elif text.startswith("/"):
                handle_echo(chat_id, text)
            else:
                handle_echo(chat_id, text)
                
        elif "callback_query" in update_data:
            callback = update_data["callback_query"]
            data = callback["data"]
            chat_id = callback["message"]["chat"]["id"]
            message_id = callback["message"]["message_id"]
            user_id = callback["from"]["id"]
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            if data == "menu_buy":
                handle_menu_buy(chat_id, message_id)
            elif data == "menu_profile":
                handle_menu_profile(chat_id, message_id, user_id)
            elif data == "menu_ref":
                handle_menu_ref(chat_id, message_id, user_id)
            elif data == "back_main":
                handle_back_main(chat_id, message_id)
            
            # –í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏
            elif data.startswith("ver_"):
                version = data.replace("ver_", "")
                handle_select_version(chat_id, message_id, version)
            
            # –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
            elif data.startswith("plan_"):
                parts = data.split("_")
                if len(parts) >= 4:
                    version = parts[1]
                    plan = parts[2]
                    price = parts[3]
                    handle_select_plan(chat_id, message_id, version, plan, price)
            
            # –û–ø–ª–∞—Ç–∞
            elif data.startswith("pay_"):
                parts = data.split("_")
                if len(parts) >= 5:
                    payment_method = parts[1]
                    version = parts[2]
                    plan = parts[3]
                    price = parts[4]
                    handle_payment(chat_id, message_id, version, plan, price, payment_method)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
            elif data.startswith("check_payment_"):
                invoice_id = data.replace("check_payment_", "")
                handle_check_payment(chat_id, message_id, invoice_id)
            
            # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
            elif data == "menu_lang_en":
                edit_telegram_message(chat_id, message_id, "‚úÖ Language changed to English", back_button_markup())
            
            answer_callback_query(callback['id'])
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
