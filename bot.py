import asyncio
import logging
import json
import os
import time
import random
import string
from datetime import datetime
import html

from flask import Flask, request
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
BOT_TOKEN = "8269202056:AAEsbpsM93ey7C0Zh9dlT6oUKW2a_rFWl5w"
WEBHOOK_URL = f"https://nft-tracker-bot.onrender.com/webhook/{BOT_TOKEN}"

SOFTWARE_GROUP_LINK = "https://t.me/+um2ZFdJnNnM0Mjhi"
DATA_FILE = "purchases.json"

PRICES = {
    "LITE": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
    "VIP": {"LIFETIME": 200, "MONTH": 50, "WEEK": 0},
    "TERMUX": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
}

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def load_data():
    if not os.path.exists(DATA_FILE):
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_data(records):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(records, f, indent=2, ensure_ascii=False)

def gen_key(version):
    s = "".join(random.choices(string.ascii_uppercase + string.digits, k=8))
    t = int(time.time()) % 100000
    ver = (version or "KEY")[:3].upper()
    return f"{ver}-{s}-{t}"

def pretty_price(price_usd):
    return f"${price_usd}"

def quote_html(text: str) -> str:
    return html.escape(str(text))

# ========== Inline –º–µ–Ω—é ==========
def main_menu_markup():
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –ö—É–ø–∏—Ç—å –∫–ª—é—á", callback_data="menu_buy")
    kb.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")
    kb.button(text="üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–∫–∞", callback_data="menu_ref")
    kb.button(text="üá¨üáß English", callback_data="menu_lang_en")
    kb.adjust(2, 2)
    return kb.as_markup()

def versions_markup():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîπ LITE", callback_data="ver_LITE")
    kb.button(text="üî∏ VIP", callback_data="ver_VIP")
    kb.button(text="üü¢ Termux", callback_data="ver_TERMUX")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    kb.adjust(2, 2)
    return kb.as_markup()

# ========== –•—ç–Ω–¥–ª–µ—Ä—ã ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üéØ NFT TRACKER BOT", reply_markup=main_menu_markup())

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"üÜî Your chat_id = {message.from_user.id}")

@dp.callback_query(F.data == "menu_buy")
async def cb_menu_buy(callback: types.CallbackQuery):
    await callback.message.edit_text("üíé –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=versions_markup())

@dp.callback_query(F.data == "menu_profile")
async def cb_menu_profile(callback: types.CallbackQuery):
    uid = callback.from_user.id
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üÜî ID: <code>{quote_html(uid)}</code>\n"
        "üîë –ö–ª—é—á: <code>–Ω–µ –∫—É–ø–ª–µ–Ω</code>\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ñ—Ç–æ–º:\n{SOFTWARE_GROUP_LINK}"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "menu_ref")
async def cb_menu_ref(callback: types.CallbackQuery):
    uid = callback.from_user.id
    me = await bot.get_me()
    link = f"https://t.me/{me.username}?start=ref{uid}"
    text = (
        f"üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>0</b>\n"
        f"üíµ –ë–æ–Ω—É—Å: <b>0 USD</b>"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "back_main")
async def cb_back_main(callback: types.CallbackQuery):
    await callback.message.edit_text("üéØ NFT TRACKER BOT", reply_markup=main_menu_markup())

@dp.callback_query(F.data.startswith("ver_"))
async def cb_select_version(callback: types.CallbackQuery):
    version = callback.data.replace("ver_", "")
    await callback.message.answer(f"üîπ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: {version}")

# –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_all_messages(message: types.Message):
    await message.answer("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

# ========== Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    try:
        update_data = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω update")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        update = types.Update(**update_data)
        loop.run_until_complete(dp.feed_update(bot, update))
        loop.close()
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500

@app.route("/")
def index():
    return "‚úÖ NFT Tracker Bot is running via Webhook"

@app.route("/set_webhook")
def set_webhook_route():
    try:
        import requests
        response = requests.get(f'https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={WEBHOOK_URL}')
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}<br>Response: {response.text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

@app.route("/check")
def check_webhook():
    try:
        import requests
        response = requests.get(f'https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo')
        return response.json()
    except Exception as e:
        return {"error": str(e)}

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        import requests
        requests.get(f'https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook')
        requests.get(f'https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={WEBHOOK_URL}')
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
