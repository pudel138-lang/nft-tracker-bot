import logging
import json
import os
import time
import random
import string
import html
import requests
from flask import Flask, request, jsonify

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
BOT_TOKEN = "8269202056:AAEsbpsM93ey7C0Zh9dlT6oUKW2a_rFWl5w"
WEBHOOK_URL = f"https://nft-tracker-bot.onrender.com/webhook/{BOT_TOKEN}"

SOFTWARE_GROUP_LINK = "https://t.me/+um2ZFdJnNnM0Mjhi"
DATA_FILE = "purchases.json"

PRICES = {
    "LITE": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
    "VIP": {"LIFETIME": 200, "MONTH": 50, "WEEK": 0},
    "TERMUX": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
}

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
app = Flask(__name__)

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def load_data():
    if not os.path.exists(DATA_FILE):
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_data(records):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(records, f, indent=2, ensure_ascii=False)

def gen_key(version):
    s = "".join(random.choices(string.ascii_uppercase + string.digits, k=8))
    t = int(time.time()) % 100000
    ver = (version or "KEY")[:3].upper()
    return f"{ver}-{s}-{t}"

def pretty_price(price_usd):
    return f"${price_usd}"

def quote_html(text: str) -> str:
    return html.escape(str(text))

def send_telegram_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = reply_markup
    try:
        response = requests.post(url, json=data)
        return response.status_code == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def edit_telegram_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/editMessageText'
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = reply_markup
    try:
        response = requests.post(url, json=data)
        return response.status_code == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

# ========== Inline –º–µ–Ω—é ==========
def main_menu_markup():
    return {
        "inline_keyboard": [
            [
                {"text": "üõí –ö—É–ø–∏—Ç—å –∫–ª—é—á", "callback_data": "menu_buy"},
                {"text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "menu_profile"}
            ],
            [
                {"text": "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–∫–∞", "callback_data": "menu_ref"},
                {"text": "üá¨üáß English", "callback_data": "menu_lang_en"}
            ]
        ]
    }

def versions_markup():
    return {
        "inline_keyboard": [
            [
                {"text": "üîπ LITE", "callback_data": "ver_LITE"},
                {"text": "üî∏ VIP", "callback_data": "ver_VIP"}
            ],
            [
                {"text": "üü¢ Termux", "callback_data": "ver_TERMUX"},
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_main"}
            ]
        ]
    }

def back_button_markup():
    return {
        "inline_keyboard": [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_main"}]]
    }

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
def handle_start(chat_id, first_name):
    text = f"üéØ NFT TRACKER BOT\n\n–ü—Ä–∏–≤–µ—Ç, {first_name}!"
    send_telegram_message(chat_id, text, main_menu_markup())

def handle_id(chat_id):
    send_telegram_message(chat_id, f"üÜî Your chat_id = {chat_id}")

def handle_menu_buy(chat_id, message_id):
    edit_telegram_message(chat_id, message_id, "üíé –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", versions_markup())

def handle_menu_profile(chat_id, message_id, user_id):
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        "üîë –ö–ª—é—á: <code>–Ω–µ –∫—É–ø–ª–µ–Ω</code>\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ñ—Ç–æ–º:\n{SOFTWARE_GROUP_LINK}"
    )
    edit_telegram_message(chat_id, message_id, text, back_button_markup())

def handle_menu_ref(chat_id, message_id, user_id):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –±–æ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–æ–∂–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    bot_username = "nft_tracker_soft_bot"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username –±–æ—Ç–∞
    link = f"https://t.me/{bot_username}?start=ref{user_id}"
    text = (
        f"üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>0</b>\n"
        f"üíµ –ë–æ–Ω—É—Å: <b>0 USD</b>"
    )
    edit_telegram_message(chat_id, message_id, text, back_button_markup())

def handle_back_main(chat_id, message_id):
    edit_telegram_message(chat_id, message_id, "üéØ NFT TRACKER BOT", main_menu_markup())

def handle_select_version(chat_id, version):
    send_telegram_message(chat_id, f"üîπ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: {version}")

def handle_echo(chat_id, text):
    send_telegram_message(chat_id, f"ü§ñ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

# ========== Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    try:
        update_data = request.get_json()
        logger.info("–ü–æ–ª—É—á–µ–Ω update –æ—Ç Telegram")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "message" in update_data:
            message = update_data["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            if text.startswith("/start"):
                handle_start(chat_id, message["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
            elif text.startswith("/id"):
                handle_id(chat_id)
            elif text.startswith("/"):
                handle_echo(chat_id, text)
            else:
                handle_echo(chat_id, text)
                
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries (–∫–Ω–æ–ø–∫–∏)
        elif "callback_query" in update_data:
            callback = update_data["callback_query"]
            data = callback["data"]
            chat_id = callback["message"]["chat"]["id"]
            message_id = callback["message"]["message_id"]
            user_id = callback["from"]["id"]
            
            if data == "menu_buy":
                handle_menu_buy(chat_id, message_id)
            elif data == "menu_profile":
                handle_menu_profile(chat_id, message_id, user_id)
            elif data == "menu_ref":
                handle_menu_ref(chat_id, message_id, user_id)
            elif data == "back_main":
                handle_back_main(chat_id, message_id)
            elif data.startswith("ver_"):
                version = data.replace("ver_", "")
                handle_select_version(chat_id, version)
            elif data == "menu_lang_en":
                edit_telegram_message(chat_id, message_id, "‚úÖ Language changed to English", back_button_markup())
            
            # –û—Ç–≤–µ—Ç –Ω–∞ callback query (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏")
            requests.post(f'https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery', 
                         json={'callback_query_id': callback['id']})
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500

@app.route("/")
def index():
    return "‚úÖ NFT Tracker Bot is running via Webhook"

@app.route("/set_webhook")
def set_webhook_route():
    try:
        response = requests.get(f'https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={WEBHOOK_URL}')
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}<br>Response: {response.text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

@app.route("/check")
def check_webhook():
    try:
        response = requests.get(f'https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo')
        return response.json()
    except Exception as e:
        return {"error": str(e)}

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        requests.get(f'https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook')
        requests.get(f'https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={WEBHOOK_URL}')
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
