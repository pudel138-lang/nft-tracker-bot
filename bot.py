import logging
import json
import os
import time
import random
import string
import html
from urllib.request import urlopen, Request
from urllib.parse import urlencode
from flask import Flask, request, jsonify

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
BOT_TOKEN = "8269202056:AAEsbpsM93ey7C0Zh9dlT6oUKW2a_rFWl5w"
WEBHOOK_URL = f"https://nft-tracker-bot.onrender.com/webhook/{BOT_TOKEN}"

# CryptoBot API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ü–û–õ–£–ß–ò –í @CryptoBot!)
CRYPTOBOT_TOKEN = "480624:AAumVGyvHpmnmTKE5SB71VqMnT7EESjojse"  # –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ô!
CRYPTOBOT_API_URL = "https://pay.crypt.bot/api"

SOFTWARE_GROUP_LINK = "https://t.me/+um2ZFdJnNnM0Mjhi"
DATA_FILE = "purchases.json"
PENDING_FILE = "pending_payments.json"

PRICES = {
    "LITE": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
    "VIP": {"LIFETIME": 200, "MONTH": 50, "WEEK": 0},
    "TERMUX": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
}

VERSION_DESCRIPTIONS = {
    "LITE": "üîπ <b>LITE –≤–µ—Ä—Å–∏—è</b>\n\n‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ NFT\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 10 —Å—Å—ã–ª–æ–∫",
    "VIP": "üî∏ <b>VIP –≤–µ—Ä—Å–∏—è</b>\n\n‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ LITE\n‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n‚Ä¢ –ü–æ–∏—Å–∫ –ù–§–¢\n‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
    "TERMUX": "üü¢ <b>Termux –≤–µ—Ä—Å–∏—è</b>\n\n‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ Android\n‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º\n‚Ä¢ –ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤\n‚Ä¢ –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º"
}

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
app = Flask(__name__)

# ========== CryptoBot API ==========
def cryptobot_request(method, data=None):
    """–ó–∞–ø—Ä–æ—Å –∫ CryptoBot API"""
    try:
        url = f"{CRYPTOBOT_API_URL}/{method}"
        
        headers = {
            'Crypto-Pay-API-Token': CRYPTOBOT_TOKEN,
            'Content-Type': 'application/json'
        }
        
        if data:
            json_data = json.dumps(data).encode('utf-8')
            req = Request(url, data=json_data, headers=headers)
        else:
            req = Request(url, headers=headers)
        
        with urlopen(req) as response:
            result = json.loads(response.read().decode())
            return result
    except Exception as e:
        logger.error(f"CryptoBot request error: {e}")
        return None

def create_cryptobot_invoice(amount, asset="USDT", description="", hidden_message=""):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoBot"""
    data = {
        "asset": asset,
        "amount": str(amount),
        "description": description,
        "hidden_message": hidden_message,
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/nft_tracker_soft_bot",
        "allow_comments": False,
        "allow_anonymous": False,
        "expires_in": 3600  # 1 —á–∞—Å
    }
    
    result = cryptobot_request("createInvoice", data)
    if result and result.get('ok'):
        return result.get('result')
    return None

def get_invoice_status(invoice_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞"""
    result = cryptobot_request("getInvoices", {"invoice_ids": str(invoice_id)})
    if result and result.get('ok') and result.get('result'):
        invoices = result['result']['items']
        if invoices:
            return invoices[0]
    return None

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def load_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(filename):
        return []
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_data(filename, records):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(records, f, indent=2, ensure_ascii=False)

def gen_key(version):
    s = "".join(random.choices(string.ascii_uppercase + string.digits, k=8))
    t = int(time.time()) % 100000
    ver = (version or "KEY")[:3].upper()
    return f"{ver}-{s}-{t}"

def quote_html(text: str) -> str:
    return html.escape(str(text))

def make_telegram_request(method, data=None):
    """–ó–∞–ø—Ä–æ—Å –∫ Telegram API"""
    try:
        url = f'https://api.telegram.org/bot{BOT_TOKEN}/{method}'
        
        if data:
            json_data = json.dumps(data).encode('utf-8')
            req = Request(url, data=json_data, headers={'Content-Type': 'application/json'})
        else:
            req = Request(url)
        
        with urlopen(req) as response:
            return json.loads(response.read().decode())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram: {e}")
        return None

def send_telegram_message(chat_id, text, reply_markup=None):
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = reply_markup
    return make_telegram_request('sendMessage', data)

def edit_telegram_message(chat_id, message_id, text, reply_markup=None):
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = reply_markup
    return make_telegram_request('editMessageText', data)

def answer_callback_query(callback_query_id, text=None):
    data = {'callback_query_id': callback_query_id}
    if text:
        data['text'] = text
    return make_telegram_request('answerCallbackQuery', data)

# ========== Inline –º–µ–Ω—é ==========
def main_menu_markup():
    return {
        "inline_keyboard": [
            [
                {"text": "üõí –ö—É–ø–∏—Ç—å –∫–ª—é—á", "callback_data": "menu_buy"},
                {"text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "menu_profile"}
            ],
            [
                {"text": "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–∫–∞", "callback_data": "menu_ref"},
                {"text": "üá¨üáß English", "callback_data": "menu_lang_en"}
            ]
        ]
    }

def versions_markup():
    return {
        "inline_keyboard": [
            [
                {"text": "üîπ LITE", "callback_data": "ver_LITE"},
                {"text": "üî∏ VIP", "callback_data": "ver_VIP"}
            ],
            [
                {"text": "üü¢ Termux", "callback_data": "ver_TERMUX"},
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_main"}
            ]
        ]
    }

def plan_markup(version):
    tariffs = PRICES.get(version, {})
    buttons = []
    
    for plan_key, price in tariffs.items():
        if price and price > 0:
            label = f"{plan_key} - ${price}"
            callback_data = f"plan_{version}_{plan_key}_{price}"
            buttons.append([{"text": label, "callback_data": callback_data}])
    
    buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "menu_buy"}])
    
    return {"inline_keyboard": buttons}

def payment_markup(version, plan, price, invoice_id):
    return {
        "inline_keyboard": [
            [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", "url": f"https://t.me/CryptoBot?start={invoice_id}"}],
            [{"text": "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "callback_data": f"check_{invoice_id}"}],
            [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": f"cancel_{invoice_id}"}]
        ]
    }

def back_button_markup():
    return {
        "inline_keyboard": [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_main"}]]
    }

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
def handle_start(chat_id, first_name):
    text = f"üéØ NFT TRACKER BOT\n\n–ü—Ä–∏–≤–µ—Ç, {first_name}!"
    send_telegram_message(chat_id, text, main_menu_markup())

def handle_id(chat_id):
    send_telegram_message(chat_id, f"üÜî Your chat_id = {chat_id}")

def handle_menu_buy(chat_id, message_id):
    edit_telegram_message(chat_id, message_id, "üíé –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", versions_markup())

def handle_menu_profile(chat_id, message_id, user_id):
    data = load_data(DATA_FILE)
    last_purchase = None
    
    for purchase in reversed(data):
        if str(purchase.get("user_id")) == str(user_id):
            last_purchase = purchase
            break
    
    if last_purchase:
        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üîë –ö–ª—é—á: <code>{last_purchase.get('key', '–Ω–µ –∫—É–ø–ª–µ–Ω')}</code>\n"
            f"‚öô –í–µ—Ä—Å–∏—è: {last_purchase.get('version', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üì¶ –ü–ª–∞–Ω: {last_purchase.get('plan', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí≤ –¶–µ–Ω–∞: ${last_purchase.get('price', '0')}\n"
            f"üìÖ –î–∞—Ç–∞: {last_purchase.get('created_at', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ñ—Ç–æ–º:\n{SOFTWARE_GROUP_LINK}"
        )
    else:
        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            "üîë –ö–ª—é—á: <code>–Ω–µ –∫—É–ø–ª–µ–Ω</code>\n\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ñ—Ç–æ–º:\n{SOFTWARE_GROUP_LINK}"
        )
    edit_telegram_message(chat_id, message_id, text, back_button_markup())

def handle_menu_ref(chat_id, message_id, user_id):
    bot_username = "nft_tracker_soft_bot"
    link = f"https://t.me/{bot_username}?start=ref{user_id}"
    text = (
        f"üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>0</b>\n"
        f"üíµ –ë–æ–Ω—É—Å: <b>0 USD</b>"
    )
    edit_telegram_message(chat_id, message_id, text, back_button_markup())

def handle_back_main(chat_id, message_id):
    edit_telegram_message(chat_id, message_id, "üéØ NFT TRACKER BOT", main_menu_markup())

def handle_select_version(chat_id, message_id, version):
    description = VERSION_DESCRIPTIONS.get(version, f"–í–µ—Ä—Å–∏—è {version}")
    text = f"{description}\n\nüíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
    edit_telegram_message(chat_id, message_id, text, plan_markup(version))

def handle_select_plan(chat_id, message_id, version, plan, price):
    text = (
        f"üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
        f"‚öô –í–µ—Ä—Å–∏—è: <b>{version}</b>\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{plan}</b>\n"
        f"üí≤ –°—É–º–º–∞: <b>${price} USDT</b>\n\n"
        f"–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã..."
    )
    edit_telegram_message(chat_id, message_id, text)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
    description = f"NFT Tracker - {version} {plan}"
    hidden_message = f"User: {chat_id}, Version: {version}, Plan: {plan}"
    
    invoice = create_cryptobot_invoice(
        amount=price,
        asset="USDT",
        description=description,
        hidden_message=hidden_message
    )
    
    if invoice and invoice.get('pay_url'):
        invoice_id = invoice['invoice_id']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        pending_data = load_data(PENDING_FILE)
        pending_data.append({
            "invoice_id": invoice_id,
            "user_id": chat_id,
            "version": version,
            "plan": plan,
            "price": price,
            "message_id": message_id,
            "status": "pending",
            "created_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "pay_url": invoice['pay_url']
        })
        save_data(PENDING_FILE, pending_data)
        
        text = (
            f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n\n"
            f"‚öô –í–µ—Ä—Å–∏—è: <b>{version}</b>\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{plan}</b>\n"
            f"üí≤ –°—É–º–º–∞: <b>${price} USDT</b>\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\n"
            f"‚è∞ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å"
        )
        
        edit_telegram_message(chat_id, message_id, text, payment_markup(version, plan, price, invoice_id))
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        edit_telegram_message(chat_id, message_id, text)

def handle_check_payment(chat_id, message_id, invoice_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    invoice = get_invoice_status(invoice_id)
    
    if not invoice:
        answer_callback_query(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    status = invoice.get('status', 'active')
    
    if status == 'paid':
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
        pending_data = load_data(PENDING_FILE)
        order_data = None
        order_index = -1
        
        for i, order in enumerate(pending_data):
            if order.get('invoice_id') == invoice_id:
                order_data = order
                order_index = i
                break
        
        if order_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
            key = gen_key(order_data['version'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            purchase_data = {
                "user_id": chat_id,
                "version": order_data['version'],
                "plan": order_data['plan'],
                "price": order_data['price'],
                "key": key,
                "payment_method": "cryptobot",
                "status": "paid",
                "invoice_id": invoice_id,
                "created_at": time.strftime("%Y-%m-%d %H:%M:%S")
            }
            
            data = load_data(DATA_FILE)
            data.append(purchase_data)
            save_data(DATA_FILE, data)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            pending_data.pop(order_index)
            save_data(PENDING_FILE, pending_data)
            
            text = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"‚öô –í–µ—Ä—Å–∏—è: <b>{order_data['version']}</b>\n"
                f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{order_data['plan']}</b>\n"
                f"üí≤ –°—É–º–º–∞: <b>${order_data['price']}</b>\n"
                f"üîë –í–∞—à –∫–ª—é—á: <code>{key}</code>\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ñ—Ç–æ–º:\n{SOFTWARE_GROUP_LINK}\n\n"
                f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!"
            )
            edit_telegram_message(chat_id, message_id, text)
        else:
            answer_callback_query(chat_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        answer_callback_query(chat_id, "‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞")

def handle_cancel_payment(chat_id, message_id, invoice_id):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã"""
    pending_data = load_data(PENDING_FILE)
    pending_data = [order for order in pending_data if order.get('invoice_id') != invoice_id]
    save_data(PENDING_FILE, pending_data)
    
    edit_telegram_message(chat_id, message_id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", main_menu_markup())

def handle_echo(chat_id, text):
    send_telegram_message(chat_id, f"ü§ñ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

# ========== Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    try:
        update_data = request.get_json()
        logger.info("–ü–æ–ª—É—á–µ–Ω update –æ—Ç Telegram")
        
        if "message" in update_data:
            message = update_data["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            if text.startswith("/start"):
                handle_start(chat_id, message["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
            elif text.startswith("/id"):
                handle_id(chat_id)
            elif text.startswith("/"):
                handle_echo(chat_id, text)
            else:
                handle_echo(chat_id, text)
                
        elif "callback_query" in update_data:
            callback = update_data["callback_query"]
            data = callback["data"]
            chat_id = callback["message"]["chat"]["id"]
            message_id = callback["message"]["message_id"]
            user_id = callback["from"]["id"]
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            if data == "menu_buy":
                handle_menu_buy(chat_id, message_id)
            elif data == "menu_profile":
                handle_menu_profile(chat_id, message_id, user_id)
            elif data == "menu_ref":
                handle_menu_ref(chat_id, message_id, user_id)
            elif data == "back_main":
                handle_back_main(chat_id, message_id)
            
            # –í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏
            elif data.startswith("ver_"):
                version = data.replace("ver_", "")
                handle_select_version(chat_id, message_id, version)
            
            # –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
            elif data.startswith("plan_"):
                parts = data.split("_")
                if len(parts) >= 4:
                    version = parts[1]
                    plan = parts[2]
                    price = parts[3]
                    handle_select_plan(chat_id, message_id, version, plan, price)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
            elif data.startswith("check_"):
                invoice_id = data.replace("check_", "")
                handle_check_payment(chat_id, message_id, invoice_id)
            
            # –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
            elif data.startswith("cancel_"):
                invoice_id = data.replace("cancel_", "")
                handle_cancel_payment(chat_id, message_id, invoice_id)
            
            # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
            elif data == "menu_lang_en":
                edit_telegram_message(chat_id, message_id, "‚úÖ Language changed to English", back_button_markup())
            
            answer_callback_query(callback['id'])
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500

@app.route("/")
def index():
    return "‚úÖ NFT Tracker Bot is running via Webhook"

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –†–ï–ê–õ–¨–ù–û–ô –æ–ø–ª–∞—Ç–æ–π...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        urlopen(f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook")
        urlopen(f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={WEBHOOK_URL}")
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
