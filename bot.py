# bot.py
import asyncio
import logging
import threading
import json
import os
import time
import random
import string
from datetime import datetime
import html

from flask import Flask, request
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile
import aiohttp

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
BOT_TOKEN = "8269202056:AAEsbpsM93ey7C0Zh9dlT6oUKW2a_rFWl5w"
CRYPTOPAY_TOKEN = "480624:AAumVGyvHpmnmTKE5SB71VqMnT7EESjojse"
NGROK_BASE = "https://malissa-unsupporting-else.ngrok-free.dev"

SOFTWARE_GROUP_LINK = "https://t.me/+um2ZFdJnNnM0Mjhi"

IMG_LITE = "lite.jpg"
IMG_VIP = "vip.jpg"
IMG_TERMUX = "termux.jpg"

DATA_FILE = "purchases.json"

PRICES = {
    "LITE": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
    "VIP": {"LIFETIME": 200, "MONTH": 50, "WEEK": 0},
    "TERMUX": {"LIFETIME": 100, "MONTH": 30, "WEEK": 15},
}

DEFAULT_ASSET = "USDT"

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== Aiogram + Flask ==========
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

app = Flask(__name__)

# –æ—Å–Ω–æ–≤–Ω–æ–π event loop –¥–ª—è aiogram (–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤ webhook)
main_loop = asyncio.new_event_loop()
asyncio.set_event_loop(main_loop)

pending_invoices = {}

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def load_data():
    if not os.path.exists(DATA_FILE):
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_data(records):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(records, f, indent=2, ensure_ascii=False)

def append_purchase(record):
    data = load_data()
    data.append(record)
    save_data(data)

def gen_key(version):
    s = "".join(random.choices(string.ascii_uppercase + string.digits, k=8))
    t = int(time.time()) % 100000
    ver = (version or "KEY")[:3].upper()
    return f"{ver}-{s}-{t}"

def pretty_price(price_usd):
    return f"${price_usd}"

def quote_html(text: str) -> str:
    return html.escape(str(text))

# ========== Inline –º–µ–Ω—é ==========
def main_menu_markup():
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –ö—É–ø–∏—Ç—å –∫–ª—é—á", callback_data="menu_buy")
    kb.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")
    kb.button(text="üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–∫–∞", callback_data="menu_ref")
    kb.button(text="üá¨üáß English", callback_data="menu_lang_en")
    kb.adjust(2, 2)
    return kb.as_markup()

def versions_markup():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîπ LITE", callback_data="ver_LITE")
    kb.button(text="üî∏ VIP", callback_data="ver_VIP")
    kb.button(text="üü¢ Termux", callback_data="ver_TERMUX")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    kb.adjust(2, 2)
    return kb.as_markup()

def plan_markup(version):
    kb = InlineKeyboardBuilder()
    v = version.upper()
    tariffs = PRICES.get(v, {})
    for plan_key, price in tariffs.items():
        if price and price > 0:
            label = f"{plan_key.capitalize()} ‚Äî {pretty_price(price)}"
            cb = f"order|{v}|{plan_key}|{price}"
            kb.button(text=label, callback_data=cb)
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_buy")
    kb.adjust(2, 2)
    return kb.as_markup()

# ========== –•—ç–Ω–¥–ª–µ—Ä—ã aiogram ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ä–∞–∑—É
    await message.answer("NFT TRACKER", reply_markup=main_menu_markup())

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"Your chat_id = {message.from_user.id}")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º F.data —Ñ–∏–ª—å—Ç—Ä—ã –≤–º–µ—Å—Ç–æ lambda
@dp.callback_query(F.data == "menu_buy")
async def cb_menu_buy(callback: types.CallbackQuery):
    await callback.message.edit_text("üíé –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=versions_markup())

@dp.callback_query(F.data == "menu_profile")
async def cb_menu_profile(callback: types.CallbackQuery):
    uid = callback.from_user.id
    data = load_data()
    last = None
    for rec in reversed(data):
        if int(rec.get("user_id") or 0) == int(uid):
            last = rec
            break
    if last:
        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üÜî ID: <code>{quote_html(uid)}</code>\n"
            f"üîë –ö–ª—é—á: <code>{quote_html(last.get('key'))}</code>\n"
            f"‚öô –í–µ—Ä—Å–∏—è: {quote_html(last.get('version'))}\n"
            f"üì¶ –ü–ª–∞–Ω: {quote_html(last.get('plan'))}\n"
            f"üí≤ –¶–µ–Ω–∞: {quote_html(last.get('price'))}\n"
            f"üìÖ –î–∞—Ç–∞: {quote_html(last.get('created_at'))}\n\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ñ—Ç–æ–º:\n{SOFTWARE_GROUP_LINK}"
        )
    else:
        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üÜî ID: <code>{quote_html(uid)}</code>\n"
            "üîë –ö–ª—é—á: <code>–Ω–µ –∫—É–ø–ª–µ–Ω</code>\n\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Å–æ—Ñ—Ç–æ–º:\n{SOFTWARE_GROUP_LINK}"
        )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "menu_ref")
async def cb_menu_ref(callback: types.CallbackQuery):
    uid = callback.from_user.id
    me = await bot.get_me()
    link = f"https://t.me/{me.username}?start=ref{uid}"
    text = (
        f"üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>0</b>\n"
        f"üíµ –ë–æ–Ω—É—Å: <b>0 USD</b>"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "menu_lang_en")
async def cb_menu_lang_en(callback: types.CallbackQuery):
    text = "‚úÖ Language changed to English."
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è Back", callback_data="back_main")
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

@dp.callback_query(F.data == "back_main")
async def cb_back_main(callback: types.CallbackQuery):
    await callback.message.edit_text("NFT TRACKER", reply_markup=main_menu_markup())

# –≤–µ—Ä—Å–∏–∏ ‚Äî safe photo send —á–µ—Ä–µ–∑ FSInputFile
@dp.callback_query(F.data.startswith("ver_"))
async def cb_version(callback: types.CallbackQuery):
    v = callback.data.split("_", 1)[1]
    title = v.capitalize()
    base_dir = os.path.dirname(os.path.abspath(__file__))

    if v == "LITE":
        desc = "LITE ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ñ—Ç–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        img_path = os.path.join(base_dir, IMG_LITE)
    elif v == "VIP":
        desc = "VIP ‚Äî –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ñ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º."
        img_path = os.path.join(base_dir, IMG_VIP)
    else:
        desc = "Android Termux ‚Äî —Å–∫—Ä–∏–ø—Ç –Ω–∞ Android, —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Termux."
        img_path = os.path.join(base_dir, IMG_TERMUX)

    caption = (
        f"<b>üíº NFT TRACKER ‚Äî {quote_html(title)}</b>\n\n"
        f"{quote_html(desc)}\n\n"
        f"<b>üí∞ –¢–∞—Ä–∏—Ñ—ã:</b>"
    )

    try:
        if os.path.exists(img_path):
            size_mb = os.path.getsize(img_path) / (1024 * 1024)
            logger.info("–§–∞–π–ª %s –Ω–∞–π–¥–µ–Ω (%.2f MB)", img_path, size_mb)

            # safety: –µ—Å–ª–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, –Ω–µ —à–≤—ã—Ä—è–µ–º –≤ chat –∫–∞–∫ —Ñ–æ—Ç–æ
            if size_mb > 40:
                await callback.message.answer(
                    f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size_mb:.2f} MB). –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é.",
                    reply_markup=plan_markup(v)
                )
                await callback.message.edit_text(caption, parse_mode="HTML", reply_markup=plan_markup(v))
                return

            photo = FSInputFile(img_path)
            await callback.message.answer_photo(
                photo,
                caption=caption,
                parse_mode="HTML",
                reply_markup=plan_markup(v)
            )
            await asyncio.sleep(0.35)
            try:
                await callback.message.delete()
            except Exception:
                pass
        else:
            logger.info("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s", img_path)
            await callback.message.edit_text(caption, parse_mode="HTML", reply_markup=plan_markup(v))

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: %s", e)
        await callback.message.answer(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.\n–û—à–∏–±–∫–∞: <code>{quote_html(str(e))}</code>",
            parse_mode="HTML",
            reply_markup=plan_markup(v)
        )

# –ó–∞–∫–∞–∑—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º callback –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å order|
@dp.callback_query(F.data.startswith("order|"))
async def cb_order(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("|")
        _, version, plan, price = parts
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    user_id = callback.from_user.id
    price = float(price)

    await callback.answer("–°–æ–∑–¥–∞—é —Å—á—ë—Ç... –ü–æ–¥–æ–∂–¥–∏", show_alert=False)

    payload_obj = {"user_id": user_id, "version": version, "plan": plan}
    async with aiohttp.ClientSession() as session:
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {"Crypto-Pay-API-Token": CRYPTOPAY_TOKEN}
        body = {
            "asset": DEFAULT_ASSET,
            "amount": str(price),
            "description": f"–ü–æ–∫—É–ø–∫–∞ {version} {plan} ({user_id})",
            "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            "payload": json.dumps(payload_obj),
            "allow_comments": False,
            "allow_anonymous": False
        }
        try:
            async with session.post(url, headers=headers, json=body) as resp:
                data = await resp.json()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: %s", e)
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

    if not data.get("ok"):
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç CryptoPay: {data}")
        return

    invoice = data["result"]
    invoice_id = invoice.get("invoice_id")
    pay_url = invoice.get("pay_url")
    asset = invoice.get("asset") if "asset" in invoice else DEFAULT_ASSET

    pending_invoices[str(invoice_id)] = {
        "user_id": user_id,
        "version": version,
        "plan": plan,
        "price": price,
        "asset": asset,
        "created_at": datetime.utcnow().isoformat(),
    }

    await callback.message.answer(
        f"üí∏ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {pretty_price(price)} ({asset})\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )

# ========== Flask webhook –æ—Ç CryptoPay ==========
@app.route("/cryptopay/webhook", methods=["POST"])
def cryptopay_webhook():
    data = request.get_json(force=True)
    logger.info("Webhook –ø–æ–ª—É—á–µ–Ω: %s", data)

    try:
        if data.get("update_type") == "invoice_paid":
            payload_raw = data.get("payload") or data.get("update", {}).get("payload")
            invoice_obj = data.get("invoice") or data.get("update", {})

            payload = None
            try:
                if isinstance(payload_raw, str) and payload_raw.startswith("{"):
                    payload = json.loads(payload_raw)
                else:
                    payload = payload_raw
            except Exception:
                payload = payload_raw

            if isinstance(payload, dict):
                user_id = int(payload.get("user_id")) if payload.get("user_id") else None
                version = payload.get("version")
                plan = payload.get("plan")
            else:
                user_id = int(payload) if payload else None
                version = None
                plan = None

            invoice_id = str(invoice_obj.get("invoice_id") or data.get("invoice_id") or invoice_obj.get("id"))

            order = pending_invoices.get(invoice_id)
            if order:
                if not user_id:
                    user_id = order.get("user_id")
                if not version:
                    version = order.get("version")
                if not plan:
                    plan = order.get("plan")
                price = order.get("price")
                asset = order.get("asset", DEFAULT_ASSET)
            else:
                price = invoice_obj.get("amount") or invoice_obj.get("price") or None
                asset = invoice_obj.get("asset") or DEFAULT_ASSET

            key = gen_key(version or "KEY")
            record = {
                "invoice_id": invoice_id,
                "user_id": int(user_id) if user_id else None,
                "version": version,
                "plan": plan,
                "price": price,
                "asset": asset,
                "key": key,
                "created_at": datetime.utcnow().isoformat()
            }
            append_purchase(record)

            if invoice_id in pending_invoices:
                del pending_invoices[invoice_id]

            if user_id:
                asyncio.run_coroutine_threadsafe(
                    send_payment_success(int(user_id), version, plan, key, price, asset),
                    main_loop
                )
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –¥–ª—è invoice %s", invoice_id)

        return "ok", 200

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: %s", e)
        return "error", 400

# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ ==========
async def send_payment_success(user_id, version, plan, key, price, asset):
    try:
        txt = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"üîë –í–∞—à –∫–ª—é—á: <code>{quote_html(key)}</code>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è: {quote_html(version)}</code>\n"
            f"üìÑ –ü–ª–∞–Ω: {quote_html(plan)}</code>\n"
            f"üí≤ –¶–µ–Ω–∞: {quote_html(price)} {quote_html(asset)}</code>\n\n"
            f"–°–∫–∞—á–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ:\n{SOFTWARE_GROUP_LINK}"
        )
        await bot.send_message(chat_id=int(user_id), text=txt, parse_mode="HTML")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)

# ========== –ó–∞–ø—É—Å–∫ Flask + Aiogram ==========
def start_flask():
    app.run(host="0.0.0.0", port=8080)

if __name__ == "__main__":
    threading.Thread(target=start_flask, daemon=True).start()
    main_loop.run_until_complete(dp.start_polling(bot))
